
"use client";

import { Button } from "@/components/ui/button";
import { Download, History } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
// To implement actual ZIP download, you would typically install and import a library like JSZip.
// import JSZip from 'jszip';
// import { saveAs } from 'file-saver'; // You might also need file-saver

interface ProjectControlsProps {
  onExport?: () => void;
  onShowHistory?: () => void;
  disableExport?: boolean;
  disableHistory?: boolean;
  filesToExport?: { path: string; content: string }[];
}

export const ProjectControls: React.FC<ProjectControlsProps> = ({
  onExport,
  onShowHistory,
  disableExport,
  disableHistory,
  filesToExport
}) => {
  const { toast } = useToast();

  const handleExport = async () => {
    if (onExport) {
      onExport();
    } else if (filesToExport && filesToExport.length > 0) {
      // To implement actual ZIP download, you would typically use a library like JSZip.
      // 1. Install JSZip: npm install jszip
      //    (You might also need file-saver: npm install file-saver @types/file-saver)
      // 2. Import it (see above).
      // 3. Create a zip instance, add files, and trigger download.
      // Example (conceptual):
      /*
      try {
        const JSZip = (await import('jszip')).default;
        const { saveAs } = (await import('file-saver'));

        const zip = new JSZip();
        filesToExport.forEach(file => {
          // Ensure paths are valid for ZIP (e.g., no leading slashes if not intended)
          zip.file(file.path, file.content);
        });
        
        // Add a README or manifest if desired
        zip.file("PACKAGE_README.txt", "Generated by CodeIgniter Studio.\nContains the following files:\n" + filesToExport.map(f => `- ${f.path}`).join("\n"));

        zip.generateAsync({ type: "blob" })
          .then(content => {
            saveAs(content, "CodeIgniterPackage.zip");
            toast({
              title: "Package Downloaded",
              description: "Your CodeIgniter package has been successfully downloaded as a .zip file.",
            });
          })
          .catch(err => {
            console.error("Error generating ZIP:", err);
            toast({
              title: "Error Generating ZIP",
              description: "Could not generate the package .zip file. Please try again.",
              variant: "destructive",
            });
          });
      } catch (error) {
        console.error("Error loading JSZip or FileSaver:", error);
        toast({
          title: "Download Error",
          description: "Could not prepare download. Ensure JSZip and FileSaver are available.",
          variant: "destructive",
        });
      }
      */

      console.log("Download Package initiated (files logged to console):", filesToExport);
      toast({
        title: "Download Package Ready",
        description: `${filesToExport.length} file(s) are ready. To enable .zip download, integrate a library like JSZip (see code comments in ProjectControls.tsx). Files are currently logged to the console.`,
        duration: 9000, // Longer duration for this informative toast
      });

    } else {
       toast({
        title: "Nothing to Download",
        description: "Generate or create some files first.",
        variant: "destructive"
      });
    }
  };

  return (
    <div className="flex gap-2 p-4 border-t bg-card">
      <Button onClick={handleExport} disabled={disableExport || !filesToExport || filesToExport.length === 0}>
        <Download className="mr-2 h-4 w-4" />
        Download Package
      </Button>
      {onShowHistory && (
        <Button variant="outline" onClick={onShowHistory} disabled={disableHistory}>
          <History className="mr-2 h-4 w-4" />
          History
        </Button>
      )}
    </div>
  );
};
